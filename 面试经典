1、hash或字典的时间复杂度
Python中的字典采用哈希表，最低能在O(1)时间内完成搜索，哈希表是通过计算hashcode来定位元素位置,所以只需一次即可，但是事实上要根据hash算法的碰撞几率定的,在最差的情况下也是个O(n)的

2、mysql 索引原理（比如用了什么数据结构）
B+树

3、对于海量数据，用什么数据结构存储用户搜索的高频关键词
普通树

4、高并发解决方案
	a、应用层：页面静态化：发出请求——处理请求——如果静态页面存在——显示静态页面
							     ——如果静态页面不存在——URL Rewrite（URL 被重写）——发出生成静态页面的请求——生成静态页面——显示静态页面
	b、缓存层：包括用户缓存，信息缓存等，多花点内存来做缓存，可以大量减少与数据库的交互，提高性能。
	c、调度层：负载均衡
	c、数据库层：乐观锁，控制并发数